{"version":3,"sources":["Components/NavBar.js","Components/MainPage.js","Components/About.js","Components/FAQ.js","Components/Map.js","Components/Appointment.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","lang","className","activeClassName","to","MainPage","About","FAQ","Map","Appointment","App","useState","navigator","language","type","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAIaA,G,MAAS,SAACC,GACrB,IAAMC,EAAOD,EAAMC,KACnB,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CACIA,UAAU,eACVC,gBAAgB,sBAChBC,GAAG,KACK,UAATH,EAAA,qDAEH,kBAAC,IAAD,CACIC,UAAU,eACVC,gBAAgB,sBAChBC,GAAG,UACK,UAATH,EAAA,oDAEH,kBAAC,IAAD,CACIC,UAAU,eACVC,gBAAgB,sBAChBC,GAAG,qBACK,UAATH,EAAA,iIAEH,kBAAC,IAAD,CACIC,UAAU,eACVC,gBAAgB,sBAChBC,GAAG,YACK,UAATH,EAAA,qEAEH,kBAAC,IAAD,CACIC,UAAU,eACVC,gBAAgB,sBAChBC,GAAG,QACK,UAATH,EAAA,mGClCII,EAAW,WACtB,OACE,sCCFSC,EAAQ,WACnB,OACE,sCCFSC,EAAM,WACjB,OACE,sCCFSC,EAAM,WACjB,OACE,sCCFSC,EAAc,WACzB,OACE,sCC+CWC,G,MAxCH,WAAO,IAAD,EACUC,mBAASC,UAAUC,UAD7B,mBACPZ,EADO,UAEd,OACI,oCACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,CAAQD,KAAMA,IACd,yBAAKC,UAAU,oBAiBX,2BAAOA,UAAU,UACb,2BAAOY,KAAK,aACZ,0BAAMZ,UAAU,oBAI5B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOa,KAAK,IAAIC,OAAK,EAACC,UAAWZ,IACjC,kBAAC,IAAD,CAAOU,KAAK,SAASE,UAAWX,IAChC,kBAAC,IAAD,CAAOS,KAAK,OAAOE,UAAWV,IAC9B,kBAAC,IAAD,CAAOQ,KAAK,WAAWE,UAAWT,IAClC,kBAAC,IAAD,CAAOO,KAAK,oBAAoBE,UAAWR,QCjCvCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBd,WACrBA,UAAUe,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.adb304cf.chunk.js","sourcesContent":["import React from \"react\";\nimport {NavLink} from 'react-router-dom'\nimport '../Styles/NavBar.scss'\n\nexport const NavBar = (props) => {\n  const lang = props.lang;\n  return (\n    <div className=\"NavBar\">\n      <NavLink\n          className=\"NavBar__link\"\n          activeClassName=\"NavBar__link_active\"\n          to=\"/\">\n        {lang === 'en-US' ? `Home` : `Головна`}\n      </NavLink>\n      <NavLink\n          className=\"NavBar__link\"\n          activeClassName=\"NavBar__link_active\"\n          to=\"/about\">\n        {lang === 'en-US' ? `About us` : `Про нас`}\n      </NavLink>\n      <NavLink\n          className=\"NavBar__link\"\n          activeClassName=\"NavBar__link_active\"\n          to=\"/make-appointment\">\n        {lang === 'en-US' ? `Make an appointment` : `Зробити замовлення`}\n      </NavLink>\n      <NavLink\n          className=\"NavBar__link\"\n          activeClassName=\"NavBar__link_active\"\n          to=\"/find-us\">\n        {lang === 'en-US' ? `Find us` : `Знайти нас`}\n      </NavLink>\n      <NavLink\n          className=\"NavBar__link\"\n          activeClassName=\"NavBar__link_active\"\n          to=\"/faq\">\n        {lang === 'en-US' ? `F.A.Q` : `Питання i вiдповiдi`}\n      </NavLink>\n    </div>\n  )\n}\n","import React from \"react\";\n\nexport const MainPage = () => {\n  return (\n    <>\n    </>\n  )\n}\n","import React from \"react\";\n\nexport const About = () => {\n  return (\n    <>\n    </>\n  )\n}\n","import React from \"react\";\n\nexport const FAQ = () => {\n  return (\n    <>\n    </>\n  )\n}\n","import React from \"react\";\n\nexport const Map = () => {\n  return (\n    <>\n    </>\n  )\n}\n","import React from \"react\";\n\nexport const Appointment = () => {\n  return (\n    <>\n    </>\n  )\n}\n","import React, {useState} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport './App.scss';\nimport {NavBar} from \"./Components/NavBar\";\nimport {MainPage} from \"./Components/MainPage\";\nimport {About} from \"./Components/About\";\nimport {FAQ} from \"./Components/FAQ\";\nimport {Map} from \"./Components/Map\";\nimport {Appointment} from \"./Components/Appointment\";\nimport cn from 'classnames'\n\nconst App = () => {\n    const [lang, setLang] = useState(navigator.language)\n    return (\n        <>\n            <nav className=\"nav\">\n                <NavBar lang={lang}/>\n                <div className=\"nav__btn_wrapper\">\n                    {/*<button*/}\n                    {/*    className=\"nav__btn\"*/}\n                    {/*    onClick={() => setLang('ua-UA')}*/}\n                    {/*>*/}\n                    {/*    <img*/}\n                    {/*        className={cn(lang !== 'en-US' ? \"nav__btn_img nav__btn_img-active\" : \"nav__btn_img\")}*/}\n                    {/*        src=\"images/flag-ua.png\" alt=\"\"/>*/}\n                    {/*</button>*/}\n                    {/*<button*/}\n                    {/*    className=\"nav__btn\"*/}\n                    {/*    onClick={() => setLang('en-US')}*/}\n                    {/*>*/}\n                    {/*    <img*/}\n                    {/*        className={cn(lang === 'en-US' ? \"nav__btn_img nav__btn_img-active\" : \"nav__btn_img\")}*/}\n                    {/*        src=\"images/flag-en.png\" alt=\"\"/>*/}\n                    {/*</button>*/}\n                    <label className=\"switch\">\n                        <input type=\"checkbox\"/>\n                        <span className=\"slider round\"/>\n                    </label>\n                </div>\n            </nav>\n            <Switch>\n                <Route path=\"/\" exact component={MainPage}/>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/faq\" component={FAQ}/>\n                <Route path=\"/find-us\" component={Map}/>\n                <Route path=\"/make-appointment\" component={Appointment}/>\n            </Switch>\n        </>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}